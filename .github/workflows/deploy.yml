name: Deploy to PROD-VPS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          cat <<EOF > .env
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASS=${{ secrets.DB_PASS }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_TYPE=${{ secrets.DB_TYPE }}
          BOT_TOKEN=${{ secrets.BOT_TOKEN }}
          CLOUD_PROJECT_ID=${{ secrets.CLOUD_PROJECT_ID }}
          SERVERSPACE_API_KEY=${{ secrets.SERVERSPACE_API_KEY }}
          SERVERSPACE_MODEL=${{ secrets.SERVERSPACE_MODEL }}
          DEEPGRAM_ASR_API_KEY=${{ secrets.DEEPGRAM_ASR_API_KEY }}
          EOF

      - name: Verify .env contents
        run: |
          echo "Содержимое .env:"
          cat .env

      - name: Build Docker Image
        run: |
          docker compose build

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker Image
        run: |
          docker compose push

  deploy:
    name: Deploy to Remote Server
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Copy project to server
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          source: docker-compose.yml
          target: /home/${{ secrets.SSH_USER }}/project

      - name: Deploy on Remote Server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          command_timeout: 30m
          script: |
            PROJECT_DIR=/home/${{ secrets.SSH_USER }}/project
            
            # 1) Создаём (или перезаписываем) файл .env прямо на сервере:
            cat <<EOF > $PROJECT_DIR/.env
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASS=${{ secrets.DB_PASS }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_TYPE=${{ secrets.DB_TYPE }}
            BOT_TOKEN=${{ secrets.BOT_TOKEN }}
            CLOUD_PROJECT_ID=${{ secrets.CLOUD_PROJECT_ID }}
            SERVERSPACE_API_KEY=${{ secrets.SERVERSPACE_API_KEY }}
            SERVERSPACE_MODEL=${{ secrets.SERVERSPACE_MODEL }}
            DEEPGRAM_ASR_API_KEY=${{ secrets.DEEPGRAM_ASR_API_KEY }}
            EOF
            
            # 2) Заходим в директорию с docker-compose.yml
            cd $PROJECT_DIR
  
            # 2) Скачиваем свежие образы
            docker compose pull
            docker compose up -d --remove-orphans
